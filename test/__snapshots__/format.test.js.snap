// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Format > should format multi-root fixture 1`] = `
"<view class="container">
  <text>First root element</text>
</view>
<button bindtap="handleClick">
  Click me
</button>
<image src="/images/test.png" />
"
`;

exports[`Format > should format number utilities WXS fixture 1`] = `
"<wxs module="fn">
  // 添加千分位分隔符 
  function addComma(num) {
    var parts = num.toString().split('.');
    parts[0] = parts[0].replace(getRegExp('\\\\B(?=(\\\\d{3})+(?!\\\\d))', 'g'), ',');
    return parts.join('.');
  }

  // 大数分割 
  function splitBig(value, fixed) {
    fixed = fixed || 2;
    var units = [{
      key: '亿',
      value: 100000000
    }, {
      key: '万',
      value: 10000
    }];
    var unitKey = '';
    var unitValue = 1;

    // 找到合适的单位 
    for (var i = 0; i < units.length; i++) {
      if (value >= units[i].value) {
        unitKey = units[i].key;
        unitValue = units[i].value;
        break;
      }
    }
    if (!unitKey) {
      return [value.toString(), ''];
    }
    var result = (value / unitValue).toFixed(fixed);
    return [result, unitKey];
  }

  // 统一格式化函数 
  function formatNum(value, opts) {
    opts = opts || {};
    var unit = opts.unit;

    // 处理无效值 
    if (value === null || value === undefined || isNaN(value)) {
      return opts.asArray ? ['-', ''] : '-';
    }

    // 单位转换：¥需要除以100（分转元） 
    var processedValue = value;
    if (unit === '¥') {
      processedValue = value / 100;
    }

    // 大数处理 
    if (opts.big) {
      var bigResult = splitBig(processedValue, opts.fixed);
      if (unit && bigResult[0] !== '-') {
        return opts.asArray ? [unit + ' ' + bigResult[0], bigResult[1]] : unit + ' ' + bigResult[0] + bigResult[1];
      }
      return opts.asArray ? bigResult : bigResult[0] + bigResult[1];
    }

    // 范围处理 
    if (opts.range && opts.range.length === 2) {
      var left = opts.range[0];
      var right = opts.range[1];

      // 单位转换 
      if (unit === '¥') {
        left = left / 100;
        right = right / 100;
      }
      if (Math.abs(right - left) < 0.000001) {
        var sameResult = addComma(left.toFixed(opts.fixed || 2));
        var sameFormatted = unit ? unit + ' ' + sameResult : sameResult;
        return opts.asArray ? ['均为 ' + sameFormatted, ''] : '均为 ' + sameFormatted;
      } else {
        var leftFormatted = addComma(left.toFixed(opts.fixed || 2));
        var rightFormatted = addComma(right.toFixed(opts.fixed || 2));
        if (unit) {
          leftFormatted = unit + ' ' + leftFormatted;
          rightFormatted = unit + ' ' + rightFormatted;
        }
        var rangeResult = leftFormatted + '-' + rightFormatted;
        return opts.asArray ? [rangeResult, ''] : rangeResult;
      }
    }

    // 基础格式化 
    var formatted = addComma(processedValue.toFixed(opts.fixed || 2));
    var result = unit ? unit + ' ' + formatted : formatted;
    return opts.asArray ? [result, ''] : result;
  }
  module.exports = {
    formatNum: formatNum
  };
</wxs>
"
`;

exports[`Format > should handle complex expressions 1`] = `
"<root>
  <!-- 基本逻辑运算符 -->
  <view class="{{data && data.list}}">
    <text>{{user.name || 'Anonymous'}}</text>
  </view>
  <!-- 多重 OR 运算符 -->
  <view>
    <text>{{user.name || user.nickname || 'Anonymous'}}</text>
  </view>
  <!-- 链式访问与数组访问 -->
  <view class="{{data && data.list && data.list[0]}}">
    <text>{{array[index].name || 'default'}}</text>
  </view>
  <!-- 否定运算符与混合逻辑 -->
  <view wx:if="{{condition1 && condition2 && !condition3}}">
    <text>{{title || subtitle || 'No title'}}</text>
  </view>
  <!-- 对象属性链式访问 -->
  <view data-value="{{obj.prop1 && obj.prop1.prop2 || defaultValue}}">
    <text>{{config.theme.color || 'blue'}}</text>
  </view>
  <!-- 复杂条件判断 -->
  <view wx:if="{{user && user.isActive && !user.isBlocked}}">
    <text>{{user.profile.displayName || user.username}}</text>
  </view>
  <!-- 重复数组访问组合（已修复） -->
  <view class="{{array[index] && array[index].className}}">
    <text>{{array[index] && array[index].prop || 'default'}}</text>
    <text>{{data && data.list && data.list[0] && data.list[0].value}}</text>
  </view>
</root>
"
`;

exports[`Format > should handle complex real page 1`] = `
"<view class="container">
  <van-sticky wx:if="{{createTabs}}">
    <view id="tabs" class="tabs-container">
      <van-tabs sticky bind:click="onTabsChange" custom-class="" active="{{ active }}">
        <van-tab wx:for="{{tabs}}" title="{{item.tabs_name}}" name="{{item.tabs_name}}" />
      </van-tabs>
    </view>
  </van-sticky>
  <scroll-view
    class="scroll-container"
    scroll-into-view="{{toView}}"
    scroll-y="true"
    scroll-with-animation
    bindscroll="bindscroll"
  >
    <view class="swiper-container" id="swiper-container">
      <swiper
        class="swiper_box"
        indicator-dots="true"
        indicator-active-color="#fff"
        autoplay
        circular
      >
        <swiper-item wx:for="{{cpsJdGoodsDetail.imageInfo.imageList}}" wx:key="id">
          <image
            src="{{item.url}}"
            class="slide-image"
            mode="aspectFill"
            lazy-load="true"
           />
        </swiper-item>
      </swiper>
    </view>
    <view class="goods-info vcell">
      <view class="goods-info-top-container">
        <view class="goods-profile">
          <view class="p">
            <text>¥</text>
            {{goodsDetail.basicInfo.minPrice}}
          </view>
          <view
            wx:if="{{goodsDetail.basicInfo.originalPrice && goodsDetail.basicInfo.originalPrice > 0}}"
            class="goods-price"
            style="color:#aaa;text-decoration:line-through;padding: 15rpx 0rpx 0rpx 15rpx;"
          >
            <text>¥</text>
            {{goodsDetail.basicInfo.originalPrice}}
          </view>
        </view>
        <view class="goods-info-fx">
          <view class="item left">
            <van-icon name="share-o" size="24px" />
            <view class="icon-title">分享</view>
            <button open-type="share"></button>
          </view>
          <view class="item" bindtap="drawSharePic">
            <van-icon name="qr" size="24px" />
            <view class="icon-title">二维码</view>
          </view>
        </view>
      </view>
      <view class="goods-title">{{goodsDetail.basicInfo.name}}</view>
      <view class="characteristic">{{goodsDetail.basicInfo.characteristic}}</view>
    </view>
    <view class="space"></view>
    <view class="goods-des-info" style="margin-top:35rpx;" wx:if="{{pingtuanList}}">
      <view class="label-title" style="border-bottom:1px solid #eee;">{{pingtuanList.length}}人在拼单，可直接参与</view>
      <view
        class="goods-text"
        style="margin-top:15rpx;border-bottom:1px solid #eee;overflow:hidden;"
        wx:for="{{pingtuanList}}"
        wx:key="id"
      >
        <view style="width:150rpx;float:left;">
          <image
            style="width: 150rpx; height: 150rpx;"
            src="{{item.apiExtUser.avatarUrl}}"
          ></image>
          <view
            style="width:150rpx;text-align:center;overflow: hidden;white-space: nowrap;text-overflow: ellipsis;"
          >
            {{item.apiExtUser.nick}}
          </view>
        </view>
        <view style="width:500rpx;float:left;margin-left:35rpx;">
          <view>
            已有
            <text style="color:red"> {{item.helpNumber}} </text>
            人参与
          </view>
          <view style="color: #B0B0B0;font-size:24rpx;">截止: {{item.dateEnd}}</view>
          <button
            type="warn"
            size="mini"
            data-pingtuanopenid="{{item.id}}"
            bindtap="toPingtuan"
          > 去拼单 </button>
        </view>
      </view>
    </view>
    <van-cell
      wx:if="{{hasMoreSelect && goodsDetailSkuShowType==0}}"
      custom-class="vw100"
      is-link
      bind:click="bindGuiGeTap"
    >
      <view slot="title">
        请选择:
        <block wx:for="{{goodsDetail.properties}}" wx:key="id">
          {{item.name}}
        </block>
        <block wx:for="{{goodsAddition}}" wx:key="id">
          {{item.name}}
        </block>
      </view>
    </van-cell>
    <view class="size-label-box2" wx:if="{{goodsDetailSkuShowType==1}}">
      <view class="label-title">选择商品规格</view>
      <view class="size-label-box">
        <block
          wx:for="{{goodsDetail.properties}}"
          wx:for-item="property"
          wx:for-index="idx"
          wx:key="id"
        >
          <view class="label">{{property.name}}</view>
          <view class="label-item-box">
            <view
              class="label-item {{item.active ? 'active' : '' }}"
              wx:for="{{property.childsCurGoods}}"
              wx:key="id"
              bindtap="labelItemTap"
              data-propertyindex="{{idx}}"
              data-propertychildindex="{{index}}"
            >
              {{item.name}}
            </view>
          </view>
        </block>
      </view>
      <van-cell title="购买数量">
        <view>
          <van-stepper
            value="{{ buyNumber }}"
            min="{{ buyNumMin }}"
            max="{{ buyNumMax }}"
            bind:change="stepChange"
           />
        </view>
      </van-cell>
    </view>
    <view wx:if="{{shopSubdetail}}" class="shop-container">
      <image mode="aspectFill" src="{{shopSubdetail.info.pic}}"></image>
      <view class="info">
        <view class="title">{{shopSubdetail.info.name}}</view>
        <view class="address">{{shopSubdetail.info.address}}</view>
      </view>
    </view>
    <view class="goods-des-info" id="goods-des-info">
      <view class="label-title">
        <view class="left">商品详情</view>
      </view>
      <view class="goods-text">
        <image
          wx:for="{{ cpsJdGoodsDetail.detailImagesArray }}"
          wx:key="id"
          mode="widthFix"
          src="{{ item }}"
        ></image>
      </view>
    </view>
    <van-cell-group
      wx:if="{{!curGoodsKanjia && reputation}}"
      custom-class="vw100"
      title="宝贝评价"
    >
      <block wx:for="{{reputation}}" wx:key="id">
        <van-cell
          custom-class="reputation-cell"
          icon="{{item.user.avatarUrl}}"
          title="{{item.user.nick}}"
          label="{{item.goods.dateReputation}}"
          border="{{ false }}"
        >
          <van-rate value="{{ item.goods.goodReputation }}" color="#e64340" readonly />
        </van-cell>
        <van-cell
          wx:if="{{ item.goods.goodReputationRemark }}"
          title-class="reputation-cell-reamrk"
          title="{{item.goods.goodReputationRemark}}"
         />
        <view wx:if="{{ item.reputationPics }}" class="reputation-pics">
          <image
            wx:for="{{item.reputationPics}}"
            wx:for-item="picItem"
            src="{{ picItem.pic }}"
            mode="aspectFill"
            bindtap="previewImage"
            data-url="{{ picItem.pic }}"
          ></image>
        </view>
        <van-cell
          wx:if="{{ item.goods.goodReputationReply }}"
          title-class="reputation-cell-reamrk"
          title="掌柜回复:{{item.goods.goodReputationReply}}"
         />
      </block>
    </van-cell-group>
    <van-goods-action wx:if="{{!curGoodsKanjia}}">
      <van-goods-action-icon
        icon="chat-o"
        text="客服"
        open-type="contact"
        send-message-title="{{goodsDetail.basicInfo.name}}"
        send-message-img="{{goodsDetail.basicInfo.pic}}"
        send-message-path="/packageCps/pages/goods-details/cps-jd?id={{goodsDetail.basicInfo.id}}"
        show-message-card="{{ true }}"
       />
      <van-goods-action-icon
        icon="{{faved?'like':'like-o'}}"
        text="收藏"
        bind:click="addFav"
       />
      <van-goods-action-button
        text="立即购买"
        data-shopType="{{shopType}}"
        bind:click="tobuy"
       />
    </van-goods-action>
  </scroll-view>
</view>
<block wx:if="{{posterShow}}">
  <view class="poster-mask"></view>
  <view class="poster">
    <canvas class="canvas" style="{{canvasstyle}}" canvas-id="firstCanvas"></canvas>
  </view>
  <view class="poster-btn">
    <button type="primary" size="mini" bindtap="_saveToMobile"> 保存图片 </button>
    <button type="warn" size="mini" bindtap="closePop"> 关闭 </button>
  </view>
</block>
<poster
  id="poster"
  config="{{posterConfig}}"
  bind:success="onPosterSuccess"
  bind:fail="onPosterFail"
></poster>
<view wx:if="{{showposterImg}}" class="popup-mask"></view>
<view wx:if="{{showposterImg}}" class="posterImg-box">
  <image mode="widthFix" class="posterImg" src="{{posterImg}}"></image>
  <view class="btn-create" bindtap="savePosterPic">保存到相册</view>
</view>
<van-popup
  show="{{ !hideShopPopup }}"
  round
  closeable
  position="bottom"
  custom-style="padding-top:48rpx;max-height: 80%;"
  bind:close="closePopupTap"
>
  <van-card
    centered
    price="{{price.priceSale}}"
    origin-price="{{ price.priceJd ? price.priceJd : '' }}"
    title="{{price.skuName}}"
    thumb="{{ imageDomain }}{{ price.pic }}"
   />
  <van-cell title="购买数量">
    <view>
      <van-stepper
        value="{{ buyNumber }}"
        min="{{ 1 }}"
        max="{{ 999 }}"
        bind:change="stepChange"
       />
    </view>
  </van-cell>
  <van-cell-group wx:if="{{ curAddressData }}" title="配送地址">
    <van-cell
      title="{{curAddressData.linkMan}} {{curAddressData.mobile}}"
      label="{{curAddressData.address}}"
      value="更换"
      is-link
      bind:click="selectAddress"
     />
  </van-cell-group>
  <van-button
    wx:if="{{!curAddressData}}"
    bindtap="selectAddress"
    type="warning"
    block
  >添加收货地址</van-button>
  <van-button
    wx:if="{{curAddressData && !canPurchase}}"
    type="warning"
    disabled
    block
  >该地区已售罄</van-button>
  <van-button
    wx:if="{{curAddressData && canPurchase && shopType =='addShopCar'}}"
    bindtap="addShopCar"
    type="danger"
    block
  >加入购物车</van-button>
  <van-button
    wx:if="{{curAddressData && canPurchase && (shopType =='tobuy' || shopType =='toPingtuan')}}"
    data-shopType="{{shopType}}"
    bindtap="buyNow"
    type="danger"
    block
  >立即购买</van-button>
</van-popup>
"
`;

exports[`Format > should handle ignore comments - block 1`] = `
"<root>
  <view class="normal">normal formatting</view>
  <!-- prettier-ignore-start -->
  <view class="messy-formatting" id="test">
    <text>ignored content</text>
    <view>nested   element</view>
  </view>
  <!-- prettier-ignore-end -->
  <view class="normal-again">normal formatting again</view>
</root>
"
`;

exports[`Format > should handle ignore comments - simple 1`] = `
"<root>
  <!-- prettier-ignore -->
  <view class="messy-formatting" id="test">
    <text>simple text</text>
  </view>
  <view class="normal">
    <text>normal formatting</text>
  </view>
</root>
"
`;

exports[`Format > should handle long ES5 WXS code 1`] = `
"<wxs module="utils">
  /* A long ES5 library - expanded multi-line to probe edge cases */
  // config and primitives
  var VERSION = '1.0.0';
  var DEFAULTS = {
    currency: 'CNY',
    precision: 2,
    map: {
      a: 1,
      b: 2,
      c: 3
    },
    list: [1, 2, 3, 4, 5, 6, 7, 8, 9, /*only for test*/
    10]
  };

  // simple helpers
  function repeat(str, n) {
    var out = '';
    for (var i = 0; i < n; i++) {
      out = out + str;
    }
    return out;
  }
  var identity = function (x) {
    return x;
  };
  var not = function (fn) {
    return function (x) {
      return !fn(x);
    };
  };
  var isEven = function (n) {
    return n % 2 === 0;
  };
  var double = function (n) {
    return n * 2;
  };

  // collection helpers
  var filter = function (arr, pred) {
    var out = [];
    for (var i = 0; i < arr.length; i++) {
      if (pred(arr[i], i)) {
        out.push(arr[i]);
      }
    }
    return out;
  };
  var map = function (arr, fn) {
    var out = [];
    for (var i = 0; i < arr.length; i++) {
      out.push(fn(arr[i], i));
    }
    return out;
  };
  var reduce = function (arr, fn, init) {
    var acc = init;
    for (var i = 0; i < arr.length; i++) {
      acc = fn(acc, arr[i], i);
    }
    return acc;
  };

  // formatter with mixed line endings
  var format = function (num, opts) {
    opts = opts || {};
    var currency = opts.currency || DEFAULTS.currency;
    var precision = typeof opts.precision === 'number' ? opts.precision : DEFAULTS.precision;
    var sign = num < 0 ? '-' : '';
    var abs = Math.abs(num);
    var s = String(Math.round(abs * Math.pow(10, precision)) / Math.pow(10, precision));
    var idx = s.indexOf('.');
    if (idx === -1) {
      s = s + '.' + repeat('0', precision);
    } else {
      var need = precision - (s.length - idx - 1);
      if (need > 0) {
        s = s + repeat('0', need);
      }
    }
    return sign + currency + ' ' + s;
  };

  // function composition (keep as one line to avoid arg-list trailing issues)
  var pipe = function () {
    var fns = arguments;
    return function (x) {
      var res = x;
      for (var i = 0; i < fns.length; i++) {
        res = fns[i](res);
      }
      return res;
    };
  };

  // complex consumer with conditionals
  var complex = function (user) {
    var baseList = user && user.scores ? user.scores : DEFAULTS.list;
    var scores = map(baseList, function (v) {
      return v * (user && user.multiplier ? user.multiplier : 1);
    });
    var evens = filter(scores, isEven);
    var total = reduce(evens, function (acc, v) {
      return acc + v;
    }, 0);
    return format(total, {
      currency: user && user.currency,
      precision: 2
    });
  };

  // many statements to trigger semicolon insertion only where needed
  var obj = {
    a: 1,
    b: 2,
    deep: {
      x: 10,
      y: 20,
      z: {
        k: 30
      }
    }
  };
  obj.a = obj.a + 1;
  obj['b'] = obj['b'] + 2;
  if (obj.a > 1) {
    obj.flag = true;
  } else {
    obj.flag = false;
  }
  for (var i = 0; i < 5; i++) {
    obj.sum = (obj.sum || 0) + i;
  }

  // loops and try-catch-finally
  var j = 0;
  while (j < 3) {
    if (j === 1) {
      j = j + 1;
      continue;
    }
    j = j + 1;
  }
  try {
    var r = /[a-zA-Z_][a-zA-Z0-9_]*/g;
  } catch (e) {
    obj.err = e && e.message;
  } finally {
    obj.done = true;
  }

  // object and array literals multi-line
  var arr = [1, 2, 3, 4, 5];
  var tuple = [obj.a, obj.b, obj.deep && obj.deep.x];

  // call chains split by line but ending with closing paren
  var res = pipe(function (x) {
    return x + 1;
  }, double)(10)

  // IIFE
  (function () {
    obj.init = true;
  }());

  // export
  module.exports = {
    version: VERSION,
    defaults: DEFAULTS,
    format: format,
    sum: function (xs) {
      return reduce(xs, function (acc, v) {
        return acc + (typeof v === 'number' ? v : 0);
      }, 0);
    },
    complex: complex,
    identity: identity,
    not: not,
    isEven: isEven,
    double: double
  };
</wxs>
<view>
  <text>{{ utils.format(1234.5, { currency: 'USD', precision: 3 }) }}</text>
  <text>{{ obj && obj.deep && obj.deep.z && obj.deep.z.k }}</text>
</view>
"
`;

exports[`Format > should handle template expressions with logical operators 1`] = `
"<view
  class="{{ array[index] && array[index].className }}"
  data-id="{{ item && item.id }}"
>
  <text>{{ array[index] &&               array[index].prop || 'default' }}</text>
  <text wx:if="{{ user && user.profile && user.profile.isActive }}">{{ user.profile.name }}</text>
</view>
"
`;

exports[`Format > should handle wxs embed 1`] = `
"<root>
  <wxs module="utils">
  var formatPrice = function (price) {
    if (!price) return '--';
    return '¥' + price.toFixed(2);
  };
  var isValid = function (user) {
    return user ? true : false;
  };
  module.exports = {
    formatPrice: formatPrice,
    isValid: isValid
  };
</wxs>
  <view class="{{data}}">
    <text>{{utils.formatPrice(item.price)}}</text>
    <text wx:if="{{utils.isValid(user)}}">{{user.name}}</text>
  </view>
</root>
"
`;
